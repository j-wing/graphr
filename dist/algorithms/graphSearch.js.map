{"version":3,"sources":["js/es6/algorithms/graphSearch.js"],"names":[],"mappings":";;;;;;;;;;;;;;;MAAY,KAAK;MAEI,eAAe,cAAS,KAAK;QAA7B,eAAe,GACrB,SADM,eAAe,CACpB,KAAK,EAAE;AADsB,AAErC,WAF0C,CAAC,cAAc,YAEnD,KAAK,CAAC,CAAC;AACb,UAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,UAAI,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;;AAEtB,UAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,UAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACxB;;aARgB,eAAe,EAAS,KAAK,CAAC,cAAc;;AAA5C,mBAAe,WAUhC,iBAAiB,GAAA,YAAG;AAChB,aAAO,IAAI,CAAC;KACf;;AAZgB,mBAAe,WAchC,UAAU,GAAA,UAAC,IAAI,EAAE;AACb,YAAM,4BAA4B,CAAC;KACtC;;AAhBgB,mBAAe,WAkBhC,WAAW,GAAA,YAAE;AACT,YAAM,6BAA6B,CAAC;KACvC;;AApBgB,mBAAe,WAsBhC,YAAY,GAAA,UAAC,IAAI,EAAE;AAtBsB,AAuBrC,WAvB0C,CAAC,cAAc,WAsB7D,YAAY,YACF,IAAI,CAAC,CAAC;AACZ,UAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACzB;;AAzBgB,mBAAe,WA2BhC,IAAI,GAAA,YAAG;AACH,UAAI,OAAO,GAAG,IAAI,CAAC;;;AAGnB,SAAG;AACC,eAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;OAChC,QACM,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;;AAE1C,UAAI,CAAC,OAAO,EAAE;AACV,YAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,eAAO;OACV;;AAED,UAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvB,UAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AAC7C,WAAK,CAAC,OAAO,EAAE,CAAC;;2BAEC,KAAK;YAAb,IAAI;AACT,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AAC7B,cAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAChC;;;AAGL,UAAI,CAAC,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AACpC,UAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;KAE3B;;AAtDgB,mBAAe,WAwDhC,QAAQ,GAAA,YAAG,EAEV;;WA1DgB,eAAe;KAAS,KAAK;;uBAA7B,eAAe","file":"js/es6/algorithms/graphSearch.js","sourcesContent":["import * as algos from \"dist/algorithms/algorithmState\";\n\nexport default class GraphSearchBase extends algos.AlgorithmState {\n    constructor(graph) {\n        super(graph);\n        this.queue = [];\n        this.seen = new Set();\n\n        this.lastEdge = null;\n        this.lastNode = null;\n    }\n\n    requiresStartNode() {\n        return true;\n    }\n\n    addToQueue(node) {\n        throw \"NotImplemented: addToQueue\";\n    }\n\n    popNextNode(){\n        throw \"NotImplemented: popNextNode\";\n    }\n\n    setStartNode(node) {\n        super(node);\n        this.addToQueue(node);\n    }\n\n    next() {\n        var current = null;\n        // Get the next unseen node from the queue\n        // Nodes may have been added to the queue and then visited. \n        do {\n            current = this.popNextNode();\n        }\n        while (current && this.seen.has(current));\n\n        if (!current) {\n            this.isFinished = true;\n            return;\n        }\n\n        this.seen.add(current);\n        var edges = this.graph.getEdgesFrom(current);\n        edges.reverse();\n\n        for (var edge of edges) {\n            if (!this.seen.has(edge.toNode)) {\n                this.addToQueue(edge.toNode);\n            }\n        }\n\n        this.graph.setSelectedNode(current);\n        this.lastNode = current;\n\n    }\n\n    previous() {\n\n    }\n} "]}